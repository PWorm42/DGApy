# ------------------------------------------------ COMMENTS ------------------------------------------------------------
# Contains rountines to load the input data.


# -------------------------------------------- IMPORT MODULES ----------------------------------------------------------
import sys,os
import h5py
import w2dyn_aux_dga
import Config as conf
import FourPoint as fp

# ----------------------------------------------- FUNCTIONS ------------------------------------------------------------


def load_input_eliash_fortran():
    '''Load the input for the Eliashberg routine from output generated by the Fortran code'''
    return

# def load_1p_data(dga_conf: conf.DgaConfig = None):
#
#     if(dga_conf.opt.g1_input_type == 'w2dyn'):
#         # load contents from w2dynamics DMFT file:
#         f1p = w2dyn_aux_dga.w2dyn_file(fname=dga_conf.nam.input_path  + dga_conf.nam.fname_dmft)
#         dmft1p = f1p.load_dmft1p_w2dyn()
#         f1p.close()
#         if (dmft1p['n'] == 0.0): dmft1p['n'] = 1.0 # WARNING: This is kinda a hack to fix some certain inputs. In general this might lead to problems.
#     else:
#         raise NotImplementedError('This method for obtaining g1 has not yet been implemented.')
#     return dmft1p

def extract_gamma_w2dyn(dga_conf: conf.DgaConfig = None, giw_dmft=None, channel=None):


    g2_file = w2dyn_aux_dga.g4iw_file(fname=dga_conf.nam.input_path + dga_conf.nam.fname_g2)

    # Load Green's function
    g2 = fp.LocalFourPoint(matrix=g2_file.read_g2_iw(channel=channel, iw=dga_conf.box.wn_core),channel=channel,
                                    beta=dga_conf.sys.beta, iw=dga_conf.box.wn_core)
    g2_file.close()

    # Clip them to the size needed:
    g2.cut_iv(niv_cut=dga_conf.box.niv_invbse)

    # Create generalized susceptibility:
    gchi = fp.LocalFourPoint(matrix=fp.vec_chir_from_g2(g2=g2,giw=giw_dmft), channel=g2.channel, beta=g2.beta, iw=g2.wn)

    # Extract gamma:
    chi0_urange = fp.LocalBubble(giw=giw_dmft, beta=g2.beta, niv_sum=dga_conf.box.niv_urange, iw=dga_conf.box.wn_core)
    gamma = fp.gammar_from_gchir(gchir=gchi, gchi0_urange=chi0_urange, u=dga_conf.sys.u)

    return gamma






def get_gamma_loc(dga_conf: conf.DgaConfig = None, giw_dmft=None):
    '''
        loads the local input file for the two-particle quantities and returns the local irreduzible vertex.
    '''

    # Load the data form specified file:
    if(dga_conf.opt.g2_input_type == 'w2dyn'):
        gamma_dens = extract_gamma_w2dyn(dga_conf = dga_conf, giw_dmft=giw_dmft, channel='dens')
        gamma_magn = extract_gamma_w2dyn(dga_conf = dga_conf, giw_dmft=giw_dmft, channel='magn')

    else:
        raise NotImplementedError('This method for obtaining g2 has not yet been implemented.')

    gamma_dens.cut_iv(niv_cut=dga_conf.box.niv_core)
    gamma_magn.cut_iv(niv_cut=dga_conf.box.niv_core)

    gamma_dmft = {
        'dens': gamma_dens,
        'magn': gamma_magn
    }

    return gamma_dmft

# ----------------------------------------------- LOAD DATA ------------------------------------------------------------

FNAME1PEDFERMION = 'EDFermion_1p-data.hdf5'
FNAME2PEDFERMION = 'EDFermion_g4iw_sym.hdf5'
FNAME1PW2DYN = '1p-data.hdf5'
FNAME2PW2DYN = 'g4iw_sym.hdf5'
KNOWNINPUTTYPES = ['EDFermion','w2dyn']

def load_1p_data(input_type,path):
    if(input_type == 'EDFermion'):
        return load_1p_data_ed(path)
    elif(input_type == 'w2dyn'):
        return load_1p_data_w2dyn(path)
    else:
        raise NotImplementedError(f'Requested input type format not yet implemented. Currently known is: {KNOWNINPUTTYPES}')

def load_1p_data_ed(path):
    '''Load the single particle quantities from the ED calculation'''
    ddict = {}
    # Load the single particle Data:
    f = h5py.File(path + FNAME1PEDFERMION, 'r')
    ddict['giw'] = f['giw'][()]
    ddict['siw'] = f['siw_hat'][()]
    ddict['n'] = f['/config/totdens'][()]
    ddict['beta'] = f['/config/beta'][()]
    ddict['u'] = f['/config/U'][()]
    ddict['mu_dmft'] = f['/dmft/mu'][()]
    f.close()

    f = h5py.File(path + FNAME2PEDFERMION,'r')
    ddict['g4iw_dens'] = f['g4iw_dens'][()]
    ddict['g4iw_magn'] = f['g4iw_magn'][()]
    f.close()

    return ddict

def load_1p_data_w2dyn(path):
    '''Load the single particle quantities from a w2dynamics calculation'''
    ddict = {}
    # Load the single particle Data:
    file = w2dyn_aux_dga.w2dyn_file(fname=path+FNAME1PW2DYN)
    ddict['giw'] = file.get_giw()[0,0,:]
    ddict['siw'] = file.get_siw()[0,0,:]
    ddict['n'] = file.get_totdens()
    ddict['beta'] = file.get_beta()
    ddict['u'] = file.get_udd()
    ddict['mu_dmft'] = file.get_mu()
    file.close()

    file = w2dyn_aux_dga.g4iw_file(fname=path + FNAME2PW2DYN)
    ddict['g4iw_dens'] = file.read_g2_full(channel='dens')
    ddict['g4iw_magn'] = file.read_g2_full(channel='magn')
    file.close()

    return ddict


