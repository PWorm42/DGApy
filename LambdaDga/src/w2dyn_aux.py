# ----------------------------------------------------------------------------------------------------------------------
# File: w2dyn_aux.py
# Date: 29.06.2021
# Author: Paul Worm
# Short description: Contains auxilliary routines to read from w2dynamics file
# ----------------------------------------------------------------------------------------------------------------------

# -------------------------------------------- IMPORT MODULES ----------------------------------------------------------

import numpy as np
import h5py
import Indizes as ind

# ======================================================================================================================
# ----------------------------------------------- w2dyn CLASS ----------------------------------------------------------
# ======================================================================================================================

class w2dyn_file:
    '''Class for w2dynamics file handling.
    '''

    def __init__(self, fname=None):
        '''
        :param fname: name of the w2dynamics hdf5 file
        '''

        self._fname = fname
        self.open()

    def __del__(self):
        self._file.close()

    def close(self):
        self._file.close()

    def open(self):
        self._file = h5py.File(self._fname, 'r')

    # ==================================================================================================================
    # ------------------------------------------------ LOADING ROUTINES ------------------------------------------------
    # ==================================================================================================================

    # ==================================================================================================================
    def atom_group(self, dmft_iter='dmft-last', atom=1):
        return dmft_iter + '/ineq-{:03}'.format(atom)

    # ==================================================================================================================

    # ==================================================================================================================
    def get_niw(self):
        return self._file['.config'].attrs['qmc.niw']

    # ==================================================================================================================

    # ==================================================================================================================
    def get_nd(self, atom=1):
        return self._file['.config'].attrs['atoms.{:1}.nd'.format(atom)]

    # ==================================================================================================================

    # ==================================================================================================================
    def get_natom(self):
        return self._file['.config'].attrs['general.nat']

    # ==================================================================================================================

    # ==================================================================================================================
    def get_nd_tot(self):
        natom = self.get_natom()
        nd_tot = 0
        for ia in range(natom):
            nd_tot += self.get_nd(atom=ia + 1)
        return nd_tot

    # ==================================================================================================================

    # ==================================================================================================================
    def get_beta(self):
        return self._file['.config'].attrs['general.beta']

    # ==================================================================================================================

    # ==================================================================================================================
    def get_mu(self, dmft_iter='dmft-last'):
        return self._file[dmft_iter + '/mu/value'][()]

    # ==================================================================================================================

    # ==================================================================================================================
    def get_totdens(self):
        return self._file['.config'].attrs['general.totdens']

    # ==================================================================================================================

    # ==================================================================================================================
    def get_udd(self, atom=1):
        return self._file['.config'].attrs['atoms.{:1}.udd'.format(atom)]

    # ==================================================================================================================

    # ==================================================================================================================
    def get_siw_full(self, dmft_iter='dmft-last', atom=1):
        return self._file[self.atom_group(dmft_iter=dmft_iter, atom=atom) + '/siw-full/value'][()]

    # ==================================================================================================================

    # ==================================================================================================================
    def get_giw_full(self, dmft_iter='dmft-last', atom=1):
        return self._file[self.atom_group(dmft_iter=dmft_iter, atom=atom) + '/giw-full/value'][()]

    # ==================================================================================================================

    # ==================================================================================================================
    def get_g0iw_full(self, dmft_iter='dmft-last', atom=1):
        return self._file[self.atom_group(dmft_iter=dmft_iter, atom=atom) + '/g0iw-full/value'][()]

    # ==================================================================================================================

    # ==================================================================================================================
    def get_siw(self, dmft_iter='dmft-last', atom=1):
        return self._file[self.atom_group(dmft_iter=dmft_iter, atom=atom) + '/siw/value'][()]

    # ==================================================================================================================

    # ==================================================================================================================
    def get_giw(self, dmft_iter='dmft-last', atom=1):
        return self._file[self.atom_group(dmft_iter=dmft_iter, atom=atom) + '/giw/value'][()]

    # ==================================================================================================================

    # ==================================================================================================================
    def get_g0iw(self, dmft_iter='dmft-last', atom=1):
        return self._file[self.atom_group(dmft_iter=dmft_iter, atom=atom) + '/g0iw/value'][()]

    # ==================================================================================================================

    # ==================================================================================================================
    def get_smom_full(self, dmft_iter='dmft-last', atom=1):
        return self._file[self.atom_group(dmft_iter=dmft_iter, atom=atom) + '/smom-full/value'][()]

    # ==================================================================================================================

    # ==================================================================================================================
    def get_dc_latt(self, dmft_iter='dmft-last'):
        return self._file[dmft_iter + '/dc-latt/value'][()]

    # ==================================================================================================================

    # ==================================================================================================================
    def get_dc(self, dmft_iter='dmft-last', atom=1):
        return self._file[self.atom_group(dmft_iter=dmft_iter, atom=atom) + '/dc/value'][()]
    # ==================================================================================================================

    # ==================================================================================================================
    def load_dmft1p_w2dyn(self):

        beta = self.get_beta()
        u = self.get_udd()
        mu_dmft = self.get_mu()
        totdens = self.get_totdens()

        try:
            gloc = 0.5 * np.sum(self.get_giw_full(), axis=(0, 1, 2, 3))
        except:
            gloc = 0.5 * np.sum(self.get_giw(), axis=(0, 1))

        try:
            sloc = 0.5 * np.sum(self.get_siw_full(), axis=(0, 1, 2, 3))
        except:
            sloc = 0.5 * np.sum(self.get_siw(), axis=(0, 1))

        smom = np.squeeze(np.diagonal(0.5 * np.trace(self.get_smom_full(),axis2=1,axis1=3),axis2=1,axis1=0))

        dmft1p = {
            "beta": beta,
            "u": u,
            "mu": mu_dmft,
            "n": totdens,
            "niv": sloc.shape[0] // 2,
            "gloc": gloc,
            "sloc": sloc,
            "smom": smom
        }

        return dmft1p
    # ==================================================================================================================

# ======================================================================================================================
# ----------------------------------------------- g4iw_sym CLASS -------------------------------------------------------
# ======================================================================================================================

class g4iw_file:
    '''Class for g4iw_sym file handling. g4iw_sym contains the symmetrized two-particle Green's function as constructed
        from w2dyn worm-sampling output and obeying the abinitioDGA frequency convention.
    '''

    def __init__(self, fname=None):
        '''
        :param fname: name of the w2dynamics hdf5 file
        '''

        self._fname = fname
        self.open()

    def __del__(self):
        self._file.close()

    def close(self):
        self._file.close()

    def open(self):
        self._file = h5py.File(self._fname, 'r')

    # ==================================================================================================================
    # ------------------------------------------------ LOADING ROUTINES ------------------------------------------------
    # ==================================================================================================================

    # ==================================================================================================================
    def read_g2(self, ineq=1, channel=None, niw=0, niv=1, spinband=1):
        g2 = np.zeros((2 * niw + 1, 2 * niv, 2 * niv), dtype=complex)

        for wn in range(2 * niw + 1):
            g2[wn, :, :] = \
                self._file['/ineq-{:03}/'.format(ineq) + channel + '/{:05}/{:05}/value'.format(wn, spinband)][()].T

        return g2

    # ==================================================================================================================

    # ==================================================================================================================
    def read_g2_full(self, ineq=1, channel=None, spinband=1):
        group_exists = True
        g2 = []
        wn = 0
        while (group_exists):
            try:
                g2.append(
                    self._file['/ineq-{:03}/'.format(ineq) + channel + '/{:05}/{:05}/value'.format(wn, spinband)][()].T)
                wn += 1
            except:
                group_exists = False
        g2 = np.array(g2)
        return g2
    # ==================================================================================================================

    # ==================================================================================================================
    def read_g2_iw(self, ineq=1, channel=None, spinband=1, iw = None):
        niw = self.get_niw(ineq=ineq, channel=channel, spinband=spinband)
        iw_lin = ind.cen2lin(iw, -niw)
        g2 = []
        for wn in iw_lin:
            g2.append(self._file['/ineq-{:03}/'.format(ineq) + channel + '/{:05}/{:05}/value'.format(wn, spinband)][()].T)
        g2 = np.array(g2)
        return g2
    # ==================================================================================================================

    # ==================================================================================================================
    def get_niw(self, ineq=1, channel=None, spinband=1):
        wn = 0
        while ('/ineq-{:03}/'.format(ineq) + channel + '/{:05}/{:05}/value'.format(wn, spinband) in self._file):
            wn += 1
        niw = wn // 2
        return niw
    # ==================================================================================================================



# ======================================================================================================================
# ----------------------------------------------- three-leg CLASS -------------------------------------------------------
# ======================================================================================================================


class three_leg():
    '''Class for a three-leg vertex calculation.
    '''

    def __init__(self, fname=None):
        '''
        :param fname: name of the w2dynamics hdf5 file
        '''

        self._fname = fname
        self.open()

    def __del__(self):
        self._file.close()

    def close(self):
        self._file.close()

    def open(self):
        self._file = h5py.File(self._fname, 'r')

    # ==================================================================================================================
    # ------------------------------------------------ LOADING ROUTINES ------------------------------------------------
    # ==================================================================================================================

    # ==================================================================================================================
    def read_fermi_bose(self, sampling_method='worm', ineq=1, spinband=1):
        fermi_bose = self._file[
            '/' + sampling_method + '-001' + '/ineq-{:03}/'.format(ineq) + 'p3iw-worm' + '/{:05}/value'.format(
                spinband)][()].T
        return fermi_bose
    # ==================================================================================================================
